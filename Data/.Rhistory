library(choroplethr)
library(data.table)
source('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Data/allyears.R')
library(choroplethr)
update.packages()
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny", dependencies = TRUE)}
if("choroplethr" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethr", dependencies = TRUE)}
if("choroplethrMaps" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethrMaps", dependencies = TRUE)}
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table", dependencies = TRUE)}
library(choroplethr)
library(data.table)
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data")
#Each year is currently stored in its own folder. Each folder has three files.
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE)
allyears <- data.table(i, tmp$regborvisits, keep.rownames = TRUE)
allyears <- data.table(stabr, tmp$regborvisits, keep.rownames = TRUE)
tmp <- fread(filenames[1], sep=",", header=TRUE, sep2=",", data.table = TRUE)
allyears <- data.table(tmp$stabr, tmp$regborvisits, keep.rownames = TRUE)
colnames(tmp)[1]
allyears <- data.table(tmp$STABR, tmp$regborvisits, keep.rownames = TRUE)
tmp$regborvisits <- tmp$VISITS / tmp$REGBOR
tmp$regborvisits <- (,)
tmp$regborvisits <- ()
tmp$regborvisits <- 0
tmp$regborvisits <- tmp$VISITS / tmp$REGBOR
tmp$regborvisits <- tmp$VISITS / tmp$REGBOR
firstyear <- read.csv(filenames[1])
firstyear$regborvisits <- firstyear$VISITS / firstyear$REGBOR
firstyear$REGBOR
colnames(REGBOR)
colnames(firstyear)
View(firstyear)
filenames[1]
filenames = dir(pattern="*pusum0*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE)
nrow(filenames)
filenames
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE)
filenames = dir(pattern="*pusum0*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE)
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE)
for (i in filenames){
if("REGBOR" %in% colnames(filenames[i]))
{
cat("Yep, it's in there!\n");
}}
#year 2001,2002 doesn't have registered borrowers!
#tmp <- fread(filenames[1], sep=",", header=TRUE, sep2=",", data.table = TRUE)
for (i in filenames){
if("REGBOR" %in% colnames(filenames[i]))
{
cat("Yep, it's in there!\n");
} else {
cat("No!");
}}
colnames(filenames[21])
colnames(filenames[20])
filenames
typeof(filenames)
colnames(filenames[21])
filenames[21]
`colnames<-`(filenames[21])
`colnames<-`(filenames[21], value=TRUE)
firstyear$regborvisits <- firstyear$VISITS / firstyear$REGBOR
filenames[6]
firstyear <- read.csv(filenames[6])
for (i in filenames){
if("REGBOR" %in% colnames(filenames[i]))
{
cat("Yep, it's in there!\n");
} else {
cat("No!");
}}
"REGBOR" %in% colnames(firstyear)
firstyear$regborvisits <- firstyear$VISITS / firstyear$REGBOR
firstyear$regborvisits
firstyear$REGBOR
firstyear$VISITS
firstyear$regborvisits <- firstyear$VISITS / firstyear$REGBOR
colnames(filenames[7])
test <- read.csv(filenames[7])
colnames(test)
test$REGBOR
library(choroplethr)
library(data.table)
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data")
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE)
for (i in filenames){
temp <- read.csv(filenames[i])
if("REGBOR" %in% colnames(temp))
{
cat("Yep, it's in there!\n");
} else {
cat("No!");
}}
getwd()
for (i in filenames){
temp <- read.csv(filenames[i])
}
i
for (i in filenames){
i
temp <- read.csv(filenames[i])
}
for (i in filenames){
i
temp <- read.csv(filenames[i])
}
for (i in filenames){
temp <- read.csv(filenames[i])
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
} else {
cat("No")
}
}
?read.csv
for (i in filenames){
temp <- read.csv(filenames[i], header=TRUE, sep=",")
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
} else {
cat("No")
}
}
read.csv(filenames[7])
temp <- read.csv(filenames[i], header=TRUE, sep=",")
wd <- getwd()
temp <- read.csv(wd/filenames[i], header=TRUE, sep=",")
temp <- read.csv(wd + filenames[i], header=TRUE, sep=",")
?dir()
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE, full.names = TRUE)
for (i in filenames){
temp <- read.csv(filenames[i], header=TRUE, sep=",")
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
} else {
cat("No")
}
}
filenames[1]
read.csv(filenames[1])
for (i in filenames){
temp <- read.csv(filenames[i])
}
for (i in filenames){
temp <- read.csv(filenames[i])
i <- i + 1
}
i <- 0
for (i in filenames){
temp <- read.csv(filenames[i])
i <- i + 1
}
i <- 0
for (i in 1:len(filenames){
temp <- read.csv(filenames[i])
i <- i + 1
}
i <- 0
for (i in 1:len(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
}
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
}
View(temp)
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
} else {
cat("No")
}
}
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes in" i)
} else {
cat("No")
}
}
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
} else {
cat("No")
}
}
typeof(temp)
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp1 <- temp$regborvisits
} else {
cat("No")
}
}
temp1
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp1 <- (temp$STABR, temp$regborvisits)
} else {
cat("No")
}
}
temp1 <- as.table(temp$STABR, temp$regborvisits)
temp1 <- as.data.frame(temp$STABR, temp$regborvisits)
View(temp1)
?as.data.frame
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
} else {
cat("No")
}
}
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp1 <- temp$regborvisits
} else {
cat("No")
}
}
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp1 <- temp
} else {
cat("No")
}
}
View(temp1)
temp1$regborvisits
?as.table
temp1 <- as.data.table(temp, keep.rownames = TRUE)
View(temp1)
setkey(temp1, STABR)
tables()
temp1[,sum(v),by=STABR]
temp1[,sum(regborvisits),by=STABR]
temp1[,sum(regborvisits),by=STABR]
temp[,sum(regborvisits), by=STABR]
temp1$regborvisits <- temp1$VISITS / temp1$REGBOR
temp[,regborvisits, by=STABR]
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp[,regborvisits, by=STABR]
} else {
cat("No")
}
}
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp[,regborvisits]
} else {
cat("No")
}
}
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp[,regborvisits]
temp1 <- as.data.table(temp, keep.rownames = TRUE)
temp1[,regborvisits]
temp2 <- temp1[,regborvisits]
temp2 <- temp1[,regborvisits, setkey=STABR]
temp1 <- as.data.table(temp, keep.rownames = TRUE, setkey=STABR)
temp1 <- as.data.table(temp, setkey=STABR)
typeof(filenames)
source('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Data/allyears.R')
#Already downloaded all zip files for csv from this site: http://imls.gov/research-evaluation/data-collection/public-libraries-united-states-survey/public-libraries-united
update.packages()
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny", dependencies = TRUE)}
if("choroplethr" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethr", dependencies = TRUE)}
if("choroplethrMaps" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethrMaps", dependencies = TRUE)}
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table", dependencies = TRUE)}
#Trying a script to go through all of the years of PLS files
#Compute per regbor visits then append it to end of data frame with column name of year
#Get column name from the file name? 2006 is the first year to include this?
library(choroplethr)
library(data.table)
update.packages()
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data")
#Each year is currently stored in its own folder. Each folder has three files.
#Goes through the directory and creates a vector of the file names I want to use
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE, full.names = TRUE)
#Go through each file
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
#Look to see if there is even a Registered Borrower (REGBOR) variable in the dataset
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
#Create a new column that does Visits per Registered Borrower
#temp$regborvisits <- temp$VISITS / temp$REGBOR
#Save only regborvisits and the correlating state to a new data frame
#temp[,regborvisits]
} else {
#Don't even bother with the years that didn't track registered borrowers (pre-2006)
cat("No")
}
}
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp$VISITS
temp$regborvisits <- temp$VISITS / temp$REGBOR
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE, full.names = TRUE)
#Go through each file
filenames[7]$VISITS
read.csv(filenames[7])
temp$regborvisits <- temp$VISITS / temp$REGBOR
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
#Look to see if there is even a Registered Borrower (REGBOR) variable in the dataset
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
#Create a new column that does Visits per Registered Borrower
temp$regborvisits <- temp$VISITS / temp$REGBOR
#Save only regborvisits and the correlating state to a new data frame
temp[,regborvisits]
} else {
#Don't even bother with the years that didn't track registered borrowers (pre-2006)
cat("No")
}
}
temp$VISITS
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp$regborvisits
tables()
temp <- as.data.table(temp)
tables()
temp <- as.data.table(temp, key=STABR)
temp <- as.data.table(temp, setkey=STABR)
#Already downloaded all zip files for csv from this site: http://imls.gov/research-evaluation/data-collection/public-libraries-united-states-survey/public-libraries-united
update.packages()
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny", dependencies = TRUE)}
if("choroplethr" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethr", dependencies = TRUE)}
if("choroplethrMaps" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethrMaps", dependencies = TRUE)}
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table", dependencies = TRUE)}
#Trying a script to go through all of the years of PLS files
#Compute per regbor visits then append it to end of data frame with column name of year
#Get column name from the file name? 2006 is the first year to include this?
library(choroplethr)
library(data.table)
update.packages()
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data")
#Each year is currently stored in its own folder. Each folder has three files.
#Goes through the directory and creates a vector of the file names I want to use
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE, full.names = TRUE)
#Go through each file
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
#Look to see if there is even a Registered Borrower (REGBOR) variable in the dataset
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
#Create a new column that does Visits per Registered Borrower
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp <- as.data.table(temp, setkey="STABR")
#Save only regborvisits and the correlating state to a new data frame
} else {
#Don't even bother with the years that didn't track registered borrowers (pre-2006)
cat("No")
}
}
tables()
temp <- as.data.table(temp, setkey(temp, STABR))
temp <- as.data.table(temp)
setkey(temp, STABR)
tables()
temp[,VISITS/REGBOR]
temp1 <- temp[,VISITS/REGBOR]
temp1 <- temp[,VISITS/REGBOR, by=STABR]
View(temp1)
i <- 0
for (i in 1:length(filenames)){
temp <- read.csv(filenames[i])
i <- i + 1
#Look to see if there is even a Registered Borrower (REGBOR) variable in the dataset
if("REGBOR" %in% colnames(temp))
{
cat("Yes")
#Create a new column that does Visits per Registered Borrower
temp$regborvisits <- temp$VISITS / temp$REGBOR
temp <- as.data.table(temp)
#Save only regborvisits and the correlating state to a new data frame
temp1 <- temp[,VISITS/REGBOR, by=STABR]
} else {
#Don't even bother with the years that didn't track registered borrowers (pre-2006)
cat("No")
}
}
source('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Data/allyears.R')
source('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Data/allyears.R')
source('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Data/allyears.R')
#First download and unpack the dataset from here: http://www.imls.gov/research/pls_data_files.aspx --> now it is: http://imls.gov/research-evaluation/data-collection/public-libraries-united-states-survey/public-libraries-united
#configure the environment with appropriate packages
update.packages()
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny", dependencies = TRUE)}
if("choroplethr" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethr", dependencies = TRUE)}
if("choroplethrMaps" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethrMaps", dependencies = TRUE)}
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table", dependencies = TRUE)}
library(shiny)
library(choroplethr)
library(choroplethrMaps)
library(data.table)
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLS Data/Registered-Borrower-Visits/2012")
#load data
states <- read.csv("states2012.csv")
#This was useful for figuring out which column number I wanted: match("VISITS", names(states))
#Cleaning up data to make it compatible with choropleths function
valuecolnum <- match("VISITS", names(states))
regioncolnum <- match("STABR", names(states))
colnames(states)[valuecolnum] <- "value"
colnames(states)[regioncolnum] <- "region"
states$region <- tolower(state.name[match(states$region,state.abb)])
#Choroplethr is expecting Washington, DC so I make sure that is included
states$region[8] <- "district of columbia"
#Removing all of the remaining US territories from the data frame, since choroplethr doesn't accept them. Storing the result as a new dataframe.
states <- na.omit(states)
#Add column for registered borrower data
states$regborvisits <- states$value / states$REGBOR
colnames(states)[valuecolnum] <- "VISITS"
regborvisits <- match("regborvisits", names(states))
#one of the columns needs to be value
colnames(states)[regborvisits] <- "value"
#Make a map of the raw total visits per state
state_choropleth(states, title="visits per registered borrower: 2012",num_colors=1)
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/2012")
states <- read.csv("states2012.csv")
valuecolnum <- match("VISITS", names(states))
regioncolnum <- match("STABR", names(states))
colnames(states)[valuecolnum] <- "value"
colnames(states)[regioncolnum] <- "region"
states$region <- tolower(state.name[match(states$region,state.abb)])
#Choroplethr is expecting Washington, DC so I make sure that is included
states$region[8] <- "district of columbia"
#Removing all of the remaining US territories from the data frame, since choroplethr doesn't accept them. Storing the result as a new dataframe.
states <- na.omit(states)
#Add column for registered borrower data
states$regborvisits <- states$value / states$REGBOR
colnames(states)[valuecolnum] <- "VISITS"
regborvisits <- match("regborvisits", names(states))
#one of the columns needs to be value
colnames(states)[regborvisits] <- "value"
#Make a map of the raw total visits per state
state_choropleth(states, title="visits per registered borrower: 2012",num_colors=1)
source('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data/allyears.R')
