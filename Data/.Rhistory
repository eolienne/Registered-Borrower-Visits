shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
library(shiny)
library(choroplethr)
?.Rprofile
update.packages("choroplethr")
library(choroplethr)
update.packages(choroplethr)
sessionInfo()
install.packages("choroplethr")
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
library(choroplethr)
install.packages("choropletrh", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("choroplethr", repos="http://cran.rstudio.com/", dependencies=TRUE)
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
setwd()
getwd()
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits")
shiny::runApp('Shiny App')
getwd()
sessionInfo()
#Already downloaded all zip files for csv from this site: http://imls.gov/research-evaluation/data-collection/public-libraries-united-states-survey/public-libraries-united
#This script will generate one saved data frame that has the states and the visits per registered borrower for several years.
update.packages()
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny", dependencies = TRUE)}
if("choroplethr" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethr", dependencies = TRUE)}
if("choroplethrMaps" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethrMaps", dependencies = TRUE)}
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table", dependencies = TRUE)}
if("plyr" %in% rownames(installed.packages()) == FALSE) {install.packages("plyr", dependencies = TRUE)}
#Trying a script to go through all of the years of PLS files
#Compute per regbor visits then append it to end of data frame with column name of year
library(choroplethr)
library(data.table)
library(choroplethrMaps)
library(plyr)
update.packages()
data_columns = c("STABR", "VISITS", "REGBOR")
region_abbr = c(state.abb, "DC")
region_name = c(state.name, "District of Columbia")
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data")
#Force R to not use exponential notation
options(scipen=999)
#Each year is currently stored in its own folder. Each folder has three files.
#Goes through the directory and creates a vector of the file names I want to use
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE, full.names = TRUE)
l = list()
for (f in filenames){
# Get year, assuming it's the only number the filename
file_name <- basename(f)
file_year <- as.numeric(gsub("[^0-9]", "", file_name))
file_century <- if(file_year > 90) 1900 else 2000
year <- file_year + file_century
# Load CSV, add year
temp <- read.csv(f, stringsAsFactors=FALSE)
temp$year <- year
# Only use frame if it has all the columns we need.
if(all(data_columns %in% names(temp))) {
l[[f]] <- data.table(temp[, c(data_columns, "year")])
}
}
df <- rbindlist(l)
#Add columns
df$regborvisits <- df$VISITS / df$REGBOR
#change state abbreviations to lower case, spelled out states
df$region_name = tolower(region_name[match(df$STABR, region_abbr)])
#Drop territories not supported by Choroplethr
df <- subset(df, !is.na(df$region_name))
#Choroplethr expects a column named 'region' for the state and a column named 'value' for the values to be represented
df <- rename(df, c("region_name"="region", "regborvisits"="value"))
#Saving the data frame for later use
save(df,file="all_data.rdata")
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
library(choroplethr)
library(choroplethrMaps)
library(choroplethr)
library(choroplethr)
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
install.packages("stringi")
install.packages("choroplethr")
library(choroplethr)
remove.packages("choroplethr")
install.packages("choroplethr")
library(choroplethr)
install.packages("stringi")
library(choroplethr)
install.packages("choroplethr", dependencies = TRUE)
library(choroplethr)
install.packages("sp")
library(choroplethr)
install.packages("maps")
library(choroplethr)
shiny::runApp('C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Shiny App')
df
df$region
View(df)
df$year
View(df)
#Already downloaded all zip files for csv from this site: http://imls.gov/research-evaluation/data-collection/public-libraries-united-states-survey/public-libraries-united
#This script will generate one saved data frame that has the states and the visits per registered borrower for several years.
update.packages()
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny", dependencies = TRUE)}
if("choroplethr" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethr", dependencies = TRUE)}
if("choroplethrMaps" %in% rownames(installed.packages()) == FALSE) {install.packages("choroplethrMaps", dependencies = TRUE)}
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table", dependencies = TRUE)}
if("plyr" %in% rownames(installed.packages()) == FALSE) {install.packages("plyr", dependencies = TRUE)}
#Trying a script to go through all of the years of PLS files
#Compute per regbor visits then append it to end of data frame with column name of year
library(choroplethr)
library(data.table)
library(choroplethrMaps)
library(plyr)
update.packages()
data_columns = c("STABR", "VISITS", "REGBOR")
region_abbr = c(state.abb, "DC")
region_name = c(state.name, "District of Columbia")
setwd("C:/Users/Alyssa/Box Sync/Programming Projects/IMLSdata/Registered-Borrower-Visits/Data")
#Force R to not use exponential notation
options(scipen=999)
#Each year is currently stored in its own folder. Each folder has three files.
#Goes through the directory and creates a vector of the file names I want to use
filenames = dir(pattern="*pusum*", ignore.case=TRUE, recursive = TRUE, include.dirs=TRUE, full.names = TRUE)
l = list()
for (f in filenames){
# Get year, assuming it's the only number the filename
file_name <- basename(f)
file_year <- as.numeric(gsub("[^0-9]", "", file_name))
file_century <- if(file_year > 90) 1900 else 2000
year <- file_year + file_century
# Load CSV, add year
temp <- read.csv(f, stringsAsFactors=FALSE)
temp$year <- year
# Only use frame if it has all the columns we need.
if(all(data_columns %in% names(temp))) {
l[[f]] <- data.table(temp[, c(data_columns, "year")])
}
}
df <- rbindlist(l)
#Add columns
df$regborvisits <- df$VISITS / df$REGBOR
#change state abbreviations to lower case, spelled out states
df$region_name = tolower(region_name[match(df$STABR, region_abbr)])
#Drop territories not supported by Choroplethr
df <- subset(df, !is.na(df$region_name))
#Choroplethr expects a column named 'region' for the state and a column named 'value' for the values to be represented
df <- rename(df, c("region_name"="region", "regborvisits"="value"))
#Saving the data frame for later use
save(df,file="all_data.rdata")
install.packages("tidyr")
library(tidyr)
View(df)
tidyr::spread(year, region, value)
tidyr::spread(df, year, region)
df
df
df$region
tidyr::spread(df, region, year)
tidyr::spread(df, year, region)
tidyr::spread(df, year, value)
tidyr::spread(df, year, value, fill=NA)
tidyr::spread(df, year, value, fill="")
tidyr::spread(df, year, value)
df
library(dplyr)
dplyr::group_by(df, region)
dplyr::group_by(df, STABR)
tidyr::spread(df, region, year)
tidyr::spread(df, year, region)
df1 <- tidyr::spread(df, year, region)
na.omit(df1)
df1
df2 <- na.omit(df1)
View(df2)
View(df1)
df1 <- tidyr::spread(df, year, value)
df1
View(df1)
df2 <- na.omit(df1)
dplyr::group_by(df1, region)
df %>% group_by(region) %>% summarise(df, value)
df1 %>% group_by(region) %>% summarise(df1, value)
df1 %>% group_by(region) %>% summarise(df1, year)
df1 %>% group_by(region) %>% summarise(df1)
df1 %>% group_by(region) %>% summarise(year)
df1 %>% group_by(region) %>% summarise(value)
df1 %>% group_by(region) %>% summarise(region)
df1 %>% group_by(region) %>% summarise(year
)
df1 %>% group_by(year) %>% summarise(region)
tidyr::spread(df1, year, region)
View(df1)
tidyr::spread(df1, STABR, value)
tidyr::spread(df, STABR, value)
tidyr::spread(df, region, year)
tidyr::spread(df, year, region)
dplyr::group_by(df1, STABR)
dplyr::group_by(df1, reion)
dplyr::group_by(df1, region)
dplyr::group_by(df,STABR)
df2 <- dplyr::group_by(df,STABR)
View(df2)
df2 <- dplyr::group_by(df,ySTABR
/q
sdlkfjsdf;
df2 <- dplyr::group_by(df,year)
View(df2)
df2 <- dplyr::group_by(df,STABR)
View(df2)
tidyr::spread(df, STABR, year)
df1 <- dplyr::group_by(df,STABR)
df1
tidyr::spread(df1,year,region)
tidyr::spread(df1,region,year)
df1 <- tidyr::spread(df1,region,year)
View(df1)
df1 <- tidyr::spread(df1,STABR,year)
df1 <- tidyr::spread(df,STABR,year)
df1 <- tidyr::spread(df,year)
df1 <- tidyr::spread(df,year,region)
df1 <- tidyr::spread(df,region, year)
df1 <- tidyr::spread(df,STABR,year)
View(df)
df1 <- tidyr::spread(df,year, STABR)
View(df1)
df1 <- tidyr::spread(df,year, value)
View(df1)
dplyr::distinct(df1)
dplyr::summarise(df1, !is.na)
dplyr::summarise(df1, !is.na(2009))
dplyr::dense_rank(df1)
apply(is.na(df1))
getwd()
allstates <- write.csv(df)
getwd()
write.csv(file=allyears.csv, x=Fail)
write.csv(file=allyears.csv)
write.csv(file=allyears.csv, x=df)
write.csv(file=allyears, x=df)
write.csv(df, "allyears.csv", row.names=FALSE)
yr_data <- subset(df, year=yr)
years <- unique(df, year)
years <- unique(df$year)
years
yr_data <- subset(df, year)
?subset
year2006 <- subset(df$year)
year2006 <- subset(df$2006)
year2006 <- subset(df$year="2006")
year2006 <- subset(df$year=="2006")
df$year
names(df)
df1 <- df[,c(6,5,4)]
df1
df
name(df)
names(df)
df[1]
(df1 <- df[,c(6)])
(df1 <- df[,c(1)])
df1 <- df["year","value"]
setkey(df1, region)
data.table(df1)
as.data.table(df1)
df1
df2
as.data.table(df2)
as.data.table(df2)
df2[,"VISITS"]
df2
subset(df2, year=2006)
ohsix <- subset(df2, year=2006)
View(ohsix)
ohsix <- subset(df2, year="2006")
ohsix[year==2006]
ohsix <- subset(df2, year=="2006")
drops <- c("year")
drops
new <- c(ohsix$region,ohsix$value)
new
new <- c(,ohsix$region,ohsix$value)
new <- c(ohsix$region)
new
?setkey
setkey(ohsix, "region")
key(ohsix)
new <- ohsix$region(c[,ohsix$value])
new <- ohsix$region(c[ohsix$value])
new <- (c[ohsix$region, ohsix$value])
new <- c(ohsix$region,ohsix$value)
new
ohsix[1:6]
ohsix[,1:6]
new <- ohsix[["region","value"]]
new <- ohsix["region","value"]
new
new <- ohsix[$region,$value]
new <- ohsix[ohsix$region,ohsix$value]
new
new <- ohsix$value(setkey(ohsix$region))
